from pyasn1.type import univ

from snmp.oid_store import OIDStore
from snmp.service import SnmpService

switchCdpCacheDeviceId = (1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 6)
switchCdpCacheDevicePort = (1, 3, 6, 1, 4, 1, 9, 9, 23, 1, 2, 1, 1, 7)
switchIfDescr = (1, 3, 6, 1, 2, 1, 2, 2, 1, 2)
switchIfType = (1, 3, 6, 1, 2, 1, 2, 2, 1, 3)


class SwitchOIDStore(OIDStore):
    def __init__(self, ports=None, device_id_for_name_hook=lambda name: univ.OctetString(''), **_):
        self.ports = ports or []

        oids = {
            switchIfDescr + (1, ): univ.OctetString('Vlan1'),
            switchIfDescr + (4007, ): univ.OctetString('Vlan4007'),
            switchIfDescr + (4093, ): univ.OctetString('Vlan4093'),
            switchIfDescr + (5001, ): univ.OctetString('Port-channel1'),
            # propVirtual(53) proprietary virtual/internal
            switchIfType + (1, ): univ.Integer(53),
            switchIfType + (4007, ): univ.Integer(53),
            switchIfType + (4093, ): univ.Integer(53),
            switchIfType + (5001, ): univ.Integer(53)
        }

        index = 0
        for port_spec in self.ports:
            index += 1
            port_oids = self._create_port_oids(
                index, port_spec, device_id_for_name_hook)
            oids.update(port_oids)

        super(SwitchOIDStore, self).__init__(oids)

    def _create_port_oids(self, index, port_spec, device_id_for_name_hook):
        port_name, neighbor = port_spec.items()[0]
        if_index = 10000 + index
        return {
            switchCdpCacheDeviceId + (if_index, 1):
                lambda oid, store: device_id_for_name_hook(neighbor),
            switchCdpCacheDevicePort + (if_index, 1): univ.OctetString('peth0'),
            switchIfDescr + (if_index, ): univ.OctetString(port_name),
            # ethernetCsmacd(6) for all ethernet-like interfaces,
            #                   regardless of speed, as per RFC3635
            switchIfType + (if_index, ): univ.Integer(6)
        }


def create_snmp_switch(ip, community='switch', port=161, **kwargs):
    return SnmpService(
        ip=ip,
        community=community,
        datastore=SwitchOIDStore(device_id_for_name_hook=get_uuid_for_name_from_lldp, **kwargs),
        port=port,
        **kwargs)


def get_uuid_for_name_from_lldp(name):
    # our setup finds a uuid generated by virsh, irrelevant to this implementation, should be taken from the
    # switch configuration
    return univ.OctetString(name)
